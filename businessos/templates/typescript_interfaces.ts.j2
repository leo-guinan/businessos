/**
 * Auto-generated TypeScript interfaces from Business OS ontology.
 */

{% for segment_name, segment in segments.items() %}
export interface {{ segment_name }} {
  /** {{ segment_name }} customer segment */
  {% for prop_name, prop_def in segment.properties.items() %}
  {% if prop_def.startswith('enum[') %}
  {{ prop_name }}: {{ prop_def[5:-1] | replace('"', "'") | replace(', ', ' | ') }};
  {% elif prop_def.startswith('list[') %}
  {{ prop_name }}: string[];
  {% elif prop_def.startswith('range(') %}
  {{ prop_name }}: number;
  {% elif prop_def == 'boolean' %}
  {{ prop_name }}: boolean;
  {% elif prop_def == 'int' %}
  {{ prop_name }}: number;
  {% elif prop_def == 'float' %}
  {{ prop_name }}: number;
  {% elif prop_def == 'datetime' %}
  {{ prop_name }}: string; // ISO 8601 datetime string
  {% else %}
  {{ prop_name }}: string;
  {% endif %}
  {% endfor %}
  
  {% if segment.constraints %}
  // Business constraints:
  {% for constraint in segment.constraints %}
  // {{ constraint }}
  {% endfor %}
  {% endif %}
}

{% endfor %}

{% for campaign_name, campaign in campaigns.items() %}
export interface {{ campaign_name }} {
  /** {{ campaign_name }} marketing campaign */
  
  // Metadata
  owner_team: string;
  campaign_type: string;
  target_audience: string[];
  
  // Components
  {% for component_name, component in campaign.components.items() %}
  {{ component_name }}: Record<string, any>; // {{ component_name }} component
  {% endfor %}
  
  {% if campaign.constraints %}
  // Business constraints:
  {% for constraint in campaign.constraints %}
  // {{ constraint }}
  {% endfor %}
  {% endif %}
}

{% endfor %}

{% if lead_scoring %}
export interface LeadScoringInput {
  /** Input for lead scoring model */
  
  {% for input_name, input_def in lead_scoring.inputs.items() %}
  {% if input_def.startswith('list[') %}
  {{ input_name }}: Record<string, any>[];
  {% elif input_def == 'boolean' %}
  {{ input_name }}: boolean;
  {% elif input_def == 'int' %}
  {{ input_name }}: number;
  {% elif input_def == 'float' %}
  {{ input_name }}: number;
  {% else %}
  {{ input_name }}: string;
  {% endif %}
  {% endfor %}
}

export interface LeadScoringOutput {
  /** Output from lead scoring model */
  
  {% for output_name, output_def in lead_scoring.output.items() %}
  {% if output_def.startswith('int(') %}
  {{ output_name }}: number;
  {% elif output_def.startswith('enum[') %}
  {{ output_name }}: {{ output_def[5:-1] | replace('"', "'") | replace(', ', ' | ') }};
  {% elif output_def.startswith('string(') %}
  {{ output_name }}: string;
  {% elif output_def.startswith('float(') %}
  {{ output_name }}: number;
  {% else %}
  {{ output_name }}: string;
  {% endif %}
  {% endfor %}
}

export interface LeadScoringModel {
  /** Lead scoring model */
  
  inputs: LeadScoringInput;
  output: LeadScoringOutput;
  
  {% if lead_scoring.weights %}
  weights: Record<string, number>; // Scoring weights
  {% endif %}
  
  {% if lead_scoring.thresholds %}
  thresholds: Record<string, number>; // Scoring thresholds
  {% endif %}
  
  {% if lead_scoring.special_rules %}
  special_rules: string[]; // Special scoring rules
  {% endif %}
}

{% endif %}

// Type aliases for common types
{% for type_name, type_def in types.items() %}
{% if type_def.properties %}
export interface {{ type_name }} {
  /** {{ type_name }} type definition */
  
  {% for prop_name, prop_def in type_def.properties.items() %}
  {% if prop_def.startswith('enum[') %}
  {{ prop_name }}: {{ prop_def[5:-1] | replace('"', "'") | replace(', ', ' | ') }};
  {% elif prop_def.startswith('list[') %}
  {{ prop_name }}: string[];
  {% elif prop_def == 'boolean' %}
  {{ prop_name }}: boolean;
  {% elif prop_def == 'int' %}
  {{ prop_name }}: number;
  {% elif prop_def == 'float' %}
  {{ prop_name }}: number;
  {% else %}
  {{ prop_name }}: string;
  {% endif %}
  {% endfor %}
  
  {% if type_def.constraints %}
  // Business constraints:
  {% for constraint in type_def.constraints %}
  // {{ constraint }}
  {% endfor %}
  {% endif %}
}

{% endif %}
{% endfor %}

// Utility types
export type CustomerSegment = {{ segments.keys() | list | join(' | ') }};
export type MarketingCampaign = {{ campaigns.keys() | list | join(' | ') }}; 